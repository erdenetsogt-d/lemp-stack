---
# - name: Install repo software package for {{ ansible_distribution }}
#   apt:
#     name: "{{ repo_software_package_mariadb }}"
#     state: present

# - name: Add MariaDB Repository Key for {{ ansible_distribution }}
#   apt_key:
#     url: "{{ key_url_mariadb }}"
#     state: present

# - name: Add MariaDB Repository for {{ ansible_distribution }}
#   apt_repository:
#     repo: "{{ repo_deb_mariadb }} {{ ansible_distribution_release }}  main"
#     state: present
#     filename: mariadb
#   register: addmariadbrepo
#   #notify: Update repo cache



- name: Install Mariadb server for {{ ansible_distribution }}
  apt:
    pkg:
    - mariadb-server
    - mariadb-common
    #- python-openssl
    - python3-mysqldb
    state: latest
  become: yes

    
- name: Make mariadb server file configuration
  template:
    src: server.cnf.j2
    dest: /etc/mysql/mariadb.cnf
  notify: restart mariadb server

- name: Configure swappiness
  sysctl:
    name: vm.swappiness
    value: "{{ swappiness }}"
    state: present
  when:
    - configure_swappiness|bool

- name: Create log directory
  file:
    state: directory
    path: /var/log/mariadb
    owner: mysql
    group: mysql
    mode: 0765

- name: Configure MariaDB Logrotate
  template:
    src: mariadb_logrotate.j2
    dest: /etc/logrotate.d/mysql
  notify: restart mariadb server

- name: Check if custom password is specified for root user
  debug:
    msg: >
      WARNING DETECTED !!! the password for mysql root user is empty.
      Please set a password with a variable mysql_root_password on defaults/main.yml
      te secure the root user.
  when: not mysql_root_password

- name: Check if mysql root password was not set
  shell: >
    mysql -u root
    -h localhost
    -e "quit"
  changed_when: false
  ignore_errors: true
  register: check_passwd_root

- name: Check if unix_socket plugin is enabled
  shell: >
    mysql -u root
    -h localhost
    -e "SELECT plugin from mysql.user WHERE user = 'root'"
  ignore_errors: true
  register: check_unix_socket_plugin
  changed_when: check_unix_socket_plugin.stdout is search('socket')
  when: check_passwd_root.rc == 0

- name: Disable unix_socket plugin if set
  shell: >
    mysql -u root
    -h localhost
    -e "UPDATE mysql.user SET plugin = '' WHERE user = 'root'; FLUSH PRIVILEGES;"
  when:
    - check_passwd_root.rc == 0
    - check_unix_socket_plugin.stdout is search('socket')

- name: Delete remote login connection
  shell: >
    mysql -u root
    -h localhost
    -e "delete from mysql.user where User='root' and Host NOT IN ('localhost', '127.0.0.1');"
  when:
    - allow_remote_connections
    - check_passwd_root.rc == 0

- name: Set MariaDB root password for 127.0.0.1, localhost
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    host: "{{ item }}"
    login_user: root
    #login_password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  with_items:
    - 127.0.0.1
    - localhost
  when: check_passwd_root.rc == 0
  notify: Flush Priviliges

- name: Remove all anonymous user
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: 'ansible'
    host_all: yes
    state: absent
  notify: Flush Priviliges

- name: Remove test database
  mysql_db:
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    db: "test"
    state: absent
  register: remove_test_db
  notify:
    - Remove test database priviledges
    - Flush Priviliges
- name: Save  mysql root credentials to a file 3/1. This gonna be use backup process
  ansible.builtin.file:
    path: /etc/lambda
    state: directory
    mode: '0755'
- name: Save  mysql root credentials to a file 3/2. This gonna be use backup process
  file:
    path: /etc/lambda/mysql.conf
    state: touch
    mode: '0740'
    owner: "{{ __nginx_user }}"

- name: Insert/Update mysql root pass into file 3/3
  blockinfile:
    path: /etc/lambda/mysql.conf
    block: |
      user root
      password  {{ mysql_root_password }}
      database {{ database }}

